---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a quarantine VPC by Matthieu Lienart

############################################################################################
#
# Parameters
#
############################################################################################
Parameters:
  ProductionVpcStackName:
    Description: Name of the stack you used to deploy first the production Vpc network
    Type: String
  QuarantineVPCSubnetCidrBlock:
    Description: Cidr block for the quarantine VPC
    Type: String
    Default: 192.168.0.0/23
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  QuarantinePublicSubnetCidr:
    Type: String
    Default: 192.168.0.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  QuarantinePrivateSubnetCidr:
    Type: String
    Default: 192.168.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  QuarantineVPCFlofLogsToS3:
    Type: String
    Description: "Did you enabled the export of VPC flow logs to S3 for the Production VPC ? (If yes we will pull the information from that stack)"
    Default: "False"
    AllowedValues:
      - "True"
      - "False"
  QuarantineVPCFlofLogsToCloudWatch:
    Type: String
    Description: "Did you enabled the export of VPC flow logs to S3 for the Production VPC ? (If yes we will pull the information from that stack)"
    Default: "False"
    AllowedValues:
      - "True"
      - "False"


############################################################################################
#
# Conditions
#
############################################################################################
Conditions: 
  StoreVPCFlowLogsInS3: !Equals [!Ref QuarantineVPCFlofLogsToS3, "True"]
  StoreVPCFlowLogsInCloudWatch: !Equals [!Ref QuarantineVPCFlofLogsToCloudWatch, "True"]


############################################################################################
#
# Resources
#
############################################################################################
Resources:

  ###########################
  # quarantine VPC
  ###########################
  QuarantineVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref QuarantineVPCSubnetCidrBlock
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_VPC"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  CloudWatchFlowLogs:
    Type: AWS::EC2::FlowLog
    Condition: StoreVPCFlowLogsInCloudWatch
    DependsOn: 
      - QuarantineVPC
    Properties:
      DeliverLogsPermissionArn:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseVPCFlowLogsRoleArn"
      LogGroupName:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseVPCFlowLogsCloudWatchLogGroup"
      ResourceId: !Ref QuarantineVPC
      ResourceType: 'VPC'
      TrafficType: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseVPCFlowLogsTrafficType"
  S3FlowLogs:
    Type: AWS::EC2::FlowLog
    Condition: StoreVPCFlowLogsInS3
    DependsOn: 
      - QuarantineVPC
    Properties:
      LogDestinationType: s3
      LogDestination:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseVPCFlowLogsS3BucketArn"
      ResourceId: !Ref QuarantineVPC
      ResourceType: 'VPC'
      TrafficType:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseVPCFlowLogsTrafficType"
  QuarantineInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_InternetGateway"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantineGatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - QuarantineInternetGateway
      - QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      InternetGatewayId: !Ref QuarantineInternetGateway

  ############################
  # Quarantine Public Network
  ############################
  QuarantinePublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      AvailabilityZone:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseAvailabilityZone1"
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref QuarantinePublicSubnetCidr
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Public_Subnet"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"

  QuarantinePublicNATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_NatGateway_EIP"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePublicNATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: QuarantinePublicNATGatewayEIP
    Properties:
      AllocationId: !GetAtt QuarantinePublicNATGatewayEIP.AllocationId
      SubnetId: !Ref QuarantinePublicSubnet
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Public_NatGateway"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Public_RouteTable"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePublicSubnetPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - QuarantinePublicRouteTable
      - QuarantineInternetGateway
    Properties:
      RouteTableId: !Ref QuarantinePublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref QuarantineInternetGateway
  QuarantinePublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - QuarantinePublicSubnet
      - QuarantinePublicRouteTable
    Properties:
      SubnetId: !Ref QuarantinePublicSubnet
      RouteTableId: !Ref QuarantinePublicRouteTable
  # Quarantine Network ACL
  QuarantinePublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Public_Subnet_ACL"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  # Quarantine Public Network ACL Rules
  InboundQuarantinePublicNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref QuarantineVPCSubnetCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  InboundQuarantinePublicNetworkAclDenyMssql:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 800
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1433'
        To: '1433'
  InboundQuarantinePublicNetworkAclDenyOracle:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 801
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1521'
        To: '1521'
  InboundQuarantinePublicNetworkAclDenyAurora:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 802
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'
  InboundQuarantinePublicNetworkAclDenyPostgre:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 803
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5432'
        To: '5432'
  InboundQuarantinePublicNetworkAclDenyNfs:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 804
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '2049'
        To: '2049'
  InboundQuarantinePublicNetworkAclDenyRdp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 805
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  InboundQuarantinePublicNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 810
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  InboundQuarantinePublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 811
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundQuarantinePublicNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 812
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundQuarantinePublicNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 900
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundQuarantinePublicNetworkAclAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePublicNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePublicNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  # Quarantine Subnet Associations with ACLs
  QuarantinePublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - QuarantinePublicSubnet
      - QuarantinePublicNetworkAcl
    Properties:
      SubnetId:
        !Ref QuarantinePublicSubnet
      NetworkAclId:
        !Ref QuarantinePublicNetworkAcl

  ############################
  # Quarantine Private Network
  ############################
  QuarantinePrivateSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      AvailabilityZone:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-IncidentResponseAvailabilityZone1"
      MapPublicIpOnLaunch: False
      CidrBlock: !Ref QuarantinePrivateSubnetCidr
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Private_Subnet"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Private_RouteTable"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePrivateSubnetPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - QuarantinePrivateRouteTable
      - QuarantinePublicNATGateway
    Properties:
      RouteTableId: !Ref QuarantinePrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref QuarantinePublicNATGateway
  QuarantinePrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - QuarantinePrivateSubnet
      - QuarantinePrivateRouteTable
    Properties:
      SubnetId: !Ref QuarantinePrivateSubnet
      RouteTableId: !Ref QuarantinePrivateRouteTable
  # Quarantine Network ACL
  QuarantinePrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    DependsOn: QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_Private_Subnet_ACL"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  # Quarantine Private Network ACL Rules
  InboundQuarantinePrivateNetworkAclAllowVPCSubnets:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref QuarantineVPCSubnetCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  InboundQuarantinePrivateNetworkAclDenyMssql:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 800
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1433'
        To: '1433'
  InboundQuarantinePrivateNetworkAclDenyOracle:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 801
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1521'
        To: '1521'
  InboundQuarantinePrivateNetworkAclDenyAurora:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 802
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3306'
        To: '3306'
  InboundQuarantinePrivateNetworkAclDenyPostgre:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 803
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '5432'
        To: '5432'
  InboundQuarantinePrivateNetworkAclDenyNfs:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 804
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '2049'
        To: '2049'
  InboundQuarantinePrivateNetworkAclDenyRdp:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 805
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '3389'
        To: '3389'
  InboundQuarantinePrivateNetworkAclDeny8080:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 810
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  InboundQuarantinePrivateNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 811
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundQuarantinePrivateNetworkAclDeny8443:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 812
      Protocol: '6'
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8443'
        To: '8443'
  InboundQuarantinePrivateNetworkAclAllowReturnTraffic:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 900
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutboundQuarantinePrivateNetworkAclAllowInternal:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 100
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Ref QuarantineVPCSubnetCidrBlock
      PortRange:
        From: '0'
        To: '65535'
  OutboundQuarantinePrivateNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 200
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutboundQuarantinePrivateNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: QuarantinePrivateNetworkAcl
    Properties:
      NetworkAclId: !Ref QuarantinePrivateNetworkAcl
      RuleNumber: 201
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  # Quarantine Subnet Associations with ACLs
  QuarantinePrivateSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - QuarantinePrivateSubnet
      - QuarantinePrivateNetworkAcl
    Properties:
      SubnetId:
        !Ref QuarantinePrivateSubnet
      NetworkAclId:
        !Ref QuarantinePrivateNetworkAcl


  #Quarantine Network VPC Endpoint for SSM
  QuarantinePrivateNetworkSSMVPCEndpointNSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - QuarantineVPC
    Properties:
      VpcId: !Ref QuarantineVPC
      GroupDescription: Allow SSM to connect to instances in the Quarantine Network
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref QuarantinePrivateSubnetCidr
          Description: "AWS System Manager access to EC2"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_SSM_VPC_Endpoint_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  QuarantinePrivateNetworkSSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - QuarantineVPC
      - QuarantinePrivateSubnet
      - QuarantinePrivateNetworkSSMVPCEndpointNSG 
    Properties: 
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      VpcId: !Ref QuarantineVPC
      SecurityGroupIds: 
        - !Ref QuarantinePrivateNetworkSSMVPCEndpointNSG
      SubnetIds:
        - !Ref QuarantinePrivateSubnet
      PrivateDnsEnabled: true
  QuarantinePrivateNetworkEC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - QuarantineVPC
      - QuarantinePrivateSubnet
      - QuarantinePrivateNetworkSSMVPCEndpointNSG 
    Properties: 
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      VpcEndpointType: Interface
      VpcId: !Ref QuarantineVPC
      SecurityGroupIds: 
        - !Ref QuarantinePrivateNetworkSSMVPCEndpointNSG
      SubnetIds:
        - !Ref QuarantinePrivateSubnet
      PrivateDnsEnabled: true
  QuarantineNetworkSSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
      - QuarantineVPC
      - QuarantinePrivateSubnet
      - QuarantinePrivateNetworkSSMVPCEndpointNSG 
    Properties: 
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      VpcId: !Ref QuarantineVPC
      SecurityGroupIds: 
        - !Ref QuarantinePrivateNetworkSSMVPCEndpointNSG
      SubnetIds:
        - !Ref QuarantinePrivateSubnet
      PrivateDnsEnabled: true


############################################################################################
#
# Outputs
#
############################################################################################
Outputs:
  QuarantineVPCStackName:
    Description: The stack name of this quarantine VPC
    Value: !Sub ${AWS::StackName}
    Export:
      Name: !Sub "${AWS::StackName}-QuarantineVPCStackName"
  QuarantineVPC:
    Description: Created quarantine VPC
    Value: !Ref QuarantineVPC
    Export:
      Name: !Sub "${AWS::StackName}-QuarantineVPC"
  QuarantinePublicSubnet:
    Description: quarantine VPC Public Subnet ID
    Value: !Ref QuarantinePublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePublicSubnet"
  QuarantinePublicSubnetCidr:
    Description: Public Subnet IDs of the quarantine VPC
    Value: !Ref QuarantinePublicSubnetCidr
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePublicSubnetCidr"
  QuarantinePrivateSubnet:
    Description: quarantine VPC Private Subnet ID
    Value: !Ref QuarantinePrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePrivateSubnet"
  QuarantinePrivateSubnetCidr:
    Description: Private Subnet IDs of the quarantine VPC
    Value: !Ref QuarantinePrivateSubnetCidr
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePrivateSubnetCidr"
  QuarantinePrivateRouteTable:
    Description: The private subnet route table ID
    Value: !Ref QuarantinePrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePrivateRouteTable"
  QuarantineInternetGateway:
    Description: Internet Gateway Created for the quarantine VPC
    Value: !Ref QuarantineInternetGateway
    Export:
      Name: !Sub "${AWS::StackName}-QuarantineInternetGateway"
  QuarantinePublicNATGateway:
    Description: NAT Gateway Created in the public subnet of the quarantine VPC
    Value: !Ref QuarantinePublicNATGateway
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePublicNATGateway"
  QuarantinePrivateNetworkSSMVPCEndpointNSG:
    Description: NSG applied to the SSM endpoint provisioned in the quarantine's private subnet
    Value: !Ref QuarantinePrivateNetworkSSMVPCEndpointNSG
    Export:
      Name: !Sub "${AWS::StackName}-QuarantinePrivateNetworkSSMVPCEndpointNSG"



############################################################################################
#
# Metadata
#
############################################################################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Production VPC Stack
      Parameters:
        - ProductionVpcStackName
    - Label:
        default: Quarantine VPC Networking
      Parameters:
        - QuarantineVPCSubnetCidrBlock
        - QuarantinePublicSubnetCidr
        - QuarantinePrivateSubnetCidr
    - Label:
        default: Logging and Alerting
      Parameters:
        - QuarantineVPCFlofLogsToS3
        - QuarantineVPCFlofLogsToCloudWatch
