---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create the Load Balanced auto-scaling Nginx web app by Matthieu Lienart

############################################################################################
#
# Parameters
#
############################################################################################
Parameters:
  # Previos Stacks
  ProductionVpcStackName:
    Description: Name of the stack you used to deploy first the production Vpc network
    Type: String

  # EC2 Instances Settings
  BastionHost:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    Description: Specifiy if you want to also install a bastion host with SSH access in the 1st Public Subnet
  EC2AMIID:
    Type: String
    Description: EC2 AMI ID of an Amazon Linux 2 AMI (e.g. ami-035966e8adab4aaad for Ubuntu Server 18.04 LTS (HVM) instances in eu-west-1)
    Default: ami-035966e8adab4aaad
  Ec2KeyPairName:
    Type: String
    Description: Name of an existing public/private key pair name to allow to securely connect to instances
  NginxInstanceType:
    Description: Amazon EC2 instance type for the Nginx web application instances
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
  NginxNodesDesiredCapacity:
    Default: '2'
    Description: The desired capacity for the Nginx Auto Scaling group
    Type: Number
  NginxNodesMaxSize:
    Default: '3'
    Description: The maximum size of the Nginx Auto Scaling group
    Type: Number
  NginxNodesMinSize:
    Default: '2'
    Description: The minimum size of the Nginx Plus Auto Scaling group
    Type: Number
  # Lambda Code
  SNSLambdaS3BucketName:
    Type: String
    Description: Bucket name where the lambda functions used to push SNS notifications to Slack is located
  SNSLambdaS3FileName:
    Type: String
    Description: File name of SNS lambda functions in S3
    Default: SNS2Slack_AutoScaling_Alerts.zip
  # Logging and alerts
  SlackWebHook:
    Type: String
    Description: Slack Web Hook URL
    Default: https://hooks.slack.com/services/XXXXXXXXX/XXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXX
  SlackChannelName:
    Type: String
    Description: Slack Channel Name to publish the message to
    Default: "#incident-response"


############################################################################################
#
# Conditions
#
############################################################################################
Conditions: 
  HasSlackInfo: !And 
    - !Not [!Equals [!Ref SlackWebHook, '']]
    - !Not [!Equals [!Ref SlackChannelName, '']]
  InstallBastionHost: !Equals [!Ref BastionHost, "true"]


############################################################################################
#
# Resources
#
############################################################################################
Resources:

  ##################
  # EC2 Bastion Host
  ##################
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: InstallBastionHost
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionVPC"
      GroupDescription: Enable SSH access to Bastion Host via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-RemoteAccessCIDR"
          Description: "SSH Access"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_BastionHost_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  BastionHostInstanceRole:
    Type: AWS::IAM::Role
    Condition: InstallBastionHost
    Properties:
      RoleName: "Role_for_BastionHost_Instance"
      Description: This Role gives access to instances to SSM & CloudWatch
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: InstallBastionHost
    DependsOn: BastionHostInstanceRole
    Properties:
      InstanceProfileName: "Role_for_BastionHost_Instance"
      Path: "/"
      Roles:
        - !Ref NginxWebAppInstanceRole
  BastionHostEc2Instance:
    Type: AWS::EC2::Instance
    Condition: InstallBastionHost
    DependsOn:
      - BastionHostSecurityGroup
      - BastionHostInstanceProfile
    Properties: 
      ImageId: !Ref EC2AMIID
      InstanceType: !Ref NginxInstanceType
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      KeyName: !Ref Ec2KeyPairName
      SubnetId:
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionPublicSubnet1"
      SecurityGroupIds: 
        - !Ref BastionHostSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Bastion_Host"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"

  ################################################
  # Nginx EC2 Auto Scaling Group and Load Balancer
  ################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionVPC"
      GroupDescription: Enable public HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_ALB_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  NginxAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance access over SSH and HTTP access from ALB
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionVPC"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_NginxAccess_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref BastionHostSecurityGroup
          Description: "SSH Access"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  NginxAccessExtraSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NginxAccessSecurityGroup
    Properties:
      GroupId: !Ref NginxAccessSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref NginxAccessSecurityGroup
  NginxWebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Role_for_Nginx_Web_App_Instance"
      Description: This Role gives access to instances to SSM & CloudWatch
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  NginxWebAppInstanceProfile:
    DependsOn: NginxWebAppInstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "Role_for_Nginx_Web_App_Instance"
      Path: "/"
      Roles:
        - !Ref NginxWebAppInstanceRole

  NginxWebAppALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ALBSecurityGroup
    Properties:
      Name: 
        Fn::Sub:
          - "${ProjectName}-LoadBalancer"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      IpAddressType: ipv4
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue:
            !Sub "${ProductionVpcStackName}-ProductionPublicSubnet1"
        - Fn::ImportValue:
            !Sub "${ProductionVpcStackName}-ProductionPublicSubnet2"
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}-LoadBalancer"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  NginxWebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 
        Fn::Sub:
          - "${ProjectName}-LB-TargetGroup"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionVPC"
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}-LB-TargetGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  NginxWebAppALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - NginxWebAppALB
      - NginxWebAppTargetGroup
    Properties:
      LoadBalancerArn: !Ref NginxWebAppALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NginxWebAppTargetGroup
  NginxWebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EC2AMIID
      InstanceType: !Ref NginxInstanceType
      IamInstanceProfile: !Ref NginxWebAppInstanceProfile
      KeyName: !Ref Ec2KeyPairName
      SecurityGroups:
        - !Ref NginxAccessSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Install Nginx
            sudo apt-get update -y
            sudo apt-get install -y nginx
            # Enable and start service
            sudo service nginx start
            # Erase on purpose some files. This should show up in the forensic report later
            sudo -i
            rm /usr/share/nginx/html/index.html
            # Just customize the default index.html
            echo "<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">" > /var/www/html/index.nginx-debian.html
            echo "<head><style type="text/css"> /*<![CDATA[*/ h1 {text-align: center;margin: 0;padding: 0.6em 2em 0.4em;background-color: #294172;color: #fff;font-weight: normal;font-size: 1.75em;border-bottom: 2px solid #000;} h1 strong {font-weight: bold;font-size: 1.5em;} /*]]>*/ </style></head>" >> /var/www/html/index.nginx-debian.html
            echo "<body><h1>Welcome to the <strong>Incident Response & Forensic</strong> lab.<br>" >> /var/www/html/index.nginx-debian.html
            echo "You are connected to one of the NGINX web app server located behind the loadbalancer.<br><br>" >> /var/www/html/index.nginx-debian.html
            echo "The instance you are connected to is: " >> /var/www/html/index.nginx-debian.html
            curl http://169.254.169.254/latest/meta-data/hostname >> /var/www/html/index.nginx-debian.html
            echo "<br>with Private IP address: " >> /var/www/html/index.nginx-debian.html
            curl http://169.254.169.254/latest/meta-data/local-ipv4 >> /var/www/html/index.nginx-debian.html
            echo "</h1></body></html>" >> /var/www/html/index.nginx-debian.html
            # Create Bash scripts which can simulate improper behaviors which will be catched by GuardDuty
            mkdir /tmp/attack
            # Bitcon mining
            echo "echo \"Calling bitcoin wallets to download mining toolkits\"" > /tmp/attack/bitcoin-attack.sh
            echo "curl -s http://pool.minergate.com/dkjdjkjdlsajdkljalsskajdksakjdksajkllalkdjsalkjdsalkjdlkasj > /dev/null &" >> /tmp/attack/bitcoin-attack.sh
            echo "curl -s http://xmr.pool.minergate.com/dhdhjkhdjkhdjkhajkhdjskahhjkhjkahdsjkakjasdhkjahdjk > /dev/null &" >> /tmp/attack/bitcoin-attack.sh
            chmod 754 /tmp/attack/bitcoin-attack.sh
            # DNS exfiltration
            curl https://raw.githubusercontent.com/awslabs/amazon-guardduty-tester/master/artifacts/queries.txt > /tmp/attack/queries.txt
            echo "echo \"Calling large numbers of large domains to simulate tunneling via DNS\"" > /tmp/attack/dns-exfiltration-attack.sh
            echo "dig -f /tmp/attack/queries.txt > /dev/null &" >> /tmp/attack/dns-exfiltration-attack.sh
            chmod 754 /tmp/attack/dns-exfiltration-attack.sh
            # Backdoor communication
            echo "echo \"Calling a well known fake domain that is used to generate a known finding\"" > /tmp/attack/backdoor-attack.sh
            echo "dig GuardDutyC2ActivityB.com any" >> /tmp/attack/backdoor-attack.sh
            chmod 754 /tmp/attack/backdoor-attack.sh
  NginxWebAppASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - NginxWebAppTargetGroup
      - NginxWebAppLaunchConfig
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${ProductionVpcStackName}-ProductionPrivateSubnet1"
        - Fn::ImportValue:
            !Sub "${ProductionVpcStackName}-ProductionPrivateSubnet2"
      LaunchConfigurationName: !Ref NginxWebAppLaunchConfig
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      MinSize: !Ref NginxNodesMinSize
      MaxSize: !Ref NginxNodesMaxSize
      DesiredCapacity: !Ref NginxNodesDesiredCapacity
      MetricsCollection:
        - Granularity: 1Minute
      NotificationConfigurations:
        - TopicARN: !Ref SlackSNSTopic
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
      TargetGroupARNs:
        - !Ref NginxWebAppTargetGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_NginxWebApp_ASGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PropagateAtLaunch: true
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
          PropagateAtLaunch: true
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false

  ###########################
  # SNS To Slack Alerts
  ###########################
  SlackSNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName:
        Fn::Sub:
          - "${ProjectName}_SNS_Topic_For_Slack"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      TopicName:
        Fn::Sub:
          - "${ProjectName}_SNS_Topic_For_Slack"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_SNS_Topic_For_Slack"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  AutoScalingSlackAlertFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub:
          - "Role_${ProjectName}_Allow_SNS2Slack_Alert_Function"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: [ 'sts:AssumeRole' ]
            Effect: Allow
            Principal:
              Service: [ 'lambda.amazonaws.com' ]
      Policies:
        - PolicyName:
            Fn::Sub:
              - "Policy_${ProjectName}_Allow_Publish_to_SlackSNSTopic"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - 'sns:Publish'
                Resource: !Ref SlackSNSTopic
        - PolicyName:
            Fn::Sub:
              - "Policy_${ProjectName}_Allow_SNS2Slack_Logging_to_CloudWatch"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub:
                    - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}_SNS2Slack_AutoScaling_Alerts"
                    - ProjectName:
                        Fn::ImportValue:
                          !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
                  - Fn::Sub:
                    - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}_SNS2Slack_AutoScaling_Alerts:*:*"
                    - ProjectName:
                        Fn::ImportValue:
                          !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  AutoScalingSlackAlertFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - AutoScalingSlackAlertFunctionRole
    Condition: HasSlackInfo
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_SNS2Slack_AutoScaling_Alerts"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to send notification to Slack about AutoScaling events
      Handler: !Sub "SNS2Slack_AutoScaling_Alerts.lambda_handler"
      Role: !GetAtt 'AutoScalingSlackAlertFunctionRole.Arn'
      Runtime: python3.7
      MemorySize: 128
      Timeout: 15
      Code:
        S3Bucket: !Ref SNSLambdaS3BucketName
        S3Key: !Ref SNSLambdaS3FileName
      Environment:
        Variables:
          SLACK_CHANNEL: !Ref SlackChannelName
          SLACK_WEBHOOK_URL: !Ref SlackWebHook
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_SNS_Topic_For_Slack"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  SlackAlertLambdaInvokeBySns:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutoScalingSlackAlertFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'sns.amazonaws.com'  
  TriggerSlackAlert:
    Type: AWS::SNS::Subscription
    DependsOn:
      - SlackSNSTopic
      - AutoScalingSlackAlertFunction
    Properties:
      TopicArn: !Ref SlackSNSTopic
      Protocol: lambda
      Endpoint: !GetAtt 'AutoScalingSlackAlertFunction.Arn'


############################################################################################
#
# Outputs
#
############################################################################################
Outputs:
  NginxWebAppStackName:
    Description: The name of the stack used to deploy the Nginx WebApp
    Value: !Sub ${AWS::StackName}
    Export:
      Name: !Sub "${AWS::StackName}-NginxWebAppStackName"
  EC2AMIID:
    Description: EC2 AMI ID used in the Incident Response lab
    Value: !Ref EC2AMIID
    Export:
      Name: !Sub "${AWS::StackName}-EC2AMIID"
  Ec2KeyPairName:
    Description: Public/private key pair used by instances in the Incident Response lab
    Value: !Ref Ec2KeyPairName
    Export:
      Name: !Sub "${AWS::StackName}-Ec2KeyPairName"
  NginxInstanceType:
    Description: Instance type used in the Incident Response lab
    Value: !Ref NginxInstanceType
    Export:
      Name: !Sub "${AWS::StackName}-NginxInstanceType"
  SlackWebHook:
    Description: Slack Web Hook URL
    Value: !Ref SlackWebHook
    Export:
      Name: !Sub "${AWS::StackName}-SlackWebHook"
  SlackChannelName:
    Description: Incident Response Slack channel name
    Value: !Ref SlackChannelName
    Export:
      Name: !Sub "${AWS::StackName}-SlackChannelName"


############################################################################################
#
# Metadata
#
############################################################################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Production Vpc Stacks
      Parameters:
        - ProductionVpcStackName
    - Label:
        default: EC2 Instances Settings
      Parameters:
        - BastionHost
        - EC2AMIID
        - Ec2KeyPairName
        - NginxInstanceType
        - NginxNodesDesiredCapacity
        - NginxNodesMaxSize
        - NginxNodesMinSize
    - Label:
        default: Alerting
      Parameters:
        - SlackWebHook
        - SlackChannelName