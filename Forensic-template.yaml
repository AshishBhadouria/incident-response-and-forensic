---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create the Incident Response by Ben Potter @Amazon - modified by Matthieu Lienart
# See https://www.youtube.com/watch?v=f_EcwmmXkXk for Ben Potter's demo at AWS Summit London 2018
# For Ben Potter's code see the following GitHub repo: https://github.com/awslabs/aws-security-automation/tree/master/EC2%20Auto%20Clean%20Room%20Forensics 

############################################################################################
#
# Parameters
#
############################################################################################
Parameters:
  # Previos Stacks
  ProductionVpcStackName:
    Description: Name of the stack you used to deploy first the production Vpc network
    Type: String
  QuarantineVpcStackName:
    Description: Name of the stack you used to deploy first the quarantine Vpc network
    Type: String
  NginxWebAppStackName:
    Description: Name of the stack you used to deploy first the Nginx web app
    Type: String

  # Lambda Code
  LambdaS3BucketName:
    Type: String
    Description: Bucket name where lambda functions reside
  IncidentResponseLambdaS3FileName:
    Type: String
    Description: File name of Incident Response lambda functions in S3
    Default: IRandF_lambdas.zip
  OutputS3BucketName:
    Type: String
    Description: Bucket name where the Incident Response function will output the result of their investigations
  OutputS3BucketRegion:
    Type: String
    Description: Output S3 bucket region
    Default: eu-west-1



############################################################################################
#
# Resources
#
############################################################################################
Resources:

  ##################
  # S3 Endpoint
  ##################
  QuarantinePrivateNetworkS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Statement:
          - Action: "*"
            Effect: Allow
            Resource: 
              - !Sub "arn:aws:s3:::${OutputS3BucketName}"
              - !Sub "arn:aws:s3:::${OutputS3BucketName}/*"
            Principal: "*"
      RouteTableIds:
        - Fn::ImportValue:
            !Sub "${QuarantineVpcStackName}-QuarantinePrivateRouteTable"
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: 
        Fn::ImportValue:
          !Sub "${QuarantineVpcStackName}-QuarantineVPC"
  QuarantineOutputS3BucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref OutputS3BucketName
      PolicyDocument: 
        Fn::Sub: 
          - '{
              "Version": "2012-10-17",
              "Id": "PolicyS3Endpoint1",
              "Statement": [
                {
                  "Sid": "Access-to-specific-VPC-only",
                  "Principal": "*",
                  "Action": "s3:*",
                  "Effect": "Allow",
                  "Resource": ["arn:aws:s3:::${OutputS3BucketName}",
                              "arn:aws:s3:::${OutputS3BucketName}/*"],
                  "Condition": {
                    "StringEquals": {
                      "aws:sourceVpc": "${QuarantineVPpcId}"
                    }
                  }
                }
              ]
            }'
          - QuarantineVPpcId: 
              Fn::ImportValue:
                !Sub "${QuarantineVpcStackName}-QuarantineVPC"


  ############################
  # Roles and Security Groups
  ############################
  IncidenResponseLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub:
          - "Role_${ProjectName}_Allow_Incident_Response_Functions"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - states.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName:
            Fn::Sub:
              - "Policy_${ProjectName}_Allow_Permissions_for_Incident_Response_Lambdas"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLog*
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:*
                - ssm:*
                - elasticloadbalancing:*
              Resource: "*"
            - Sid: ListExistingRolesAndPolicies
              Effect: Allow
              Action:
                - iam:ListRolePolicies
                - iam:ListRoles
                - iam:Pass*
              Resource: "*"
            - Sid: InvokePermission
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
            - Sid: stepinvocation
              Effect: Allow
              Action:
                - states:*
              Resource: "*"

  IsolatedInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub "${ProductionVpcStackName}-ProductionVPC"
      GroupDescription: Block all inbound and outbound access to isolate the instance
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '1'
          ToPort: '1'
          CidrIp: 127.0.0.1/32
          Description: "Provisioning SGs with YAML if no egress rules are supplied, then the default -Allow All- rule is applied to the security group. So I add this rule which does nothing"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_IsolatedInstance_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  ForensicInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub "${QuarantineVpcStackName}-QuarantineVPC"
      GroupDescription: Block all inbound and outbound access to isolate the instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub "${QuarantineVpcStackName}-QuarantinePrivateNetworkSSMVPCEndpointNSG"
          Description: "AWS System Manager access to EC2"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTP access (to download Forensic tools)"
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTPS access (to download Forensic tools, access S3 and SSM)"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_ForensicInstance_SecurityGroup"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  ForensicInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Role_for_Forensic_Instance"
      Description: This Role gives access to the Forensic instance to SSM and S3
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName:
            Fn::Sub:
              - "Policy_${ProjectName}_Allow_Forensics_Put_in_S3"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub "arn:aws:s3:::${OutputS3BucketName}/*"
      Path: "/"
  ForensicInstanceProfile:
    DependsOn: ForensicInstanceRole
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "Role_for_Forensic_Instance"
      Path: "/"
      Roles:
        - !Ref ForensicInstanceRole


  ############################
  # Step Function
  ############################
  IncidentResponseStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: 
        Fn::Sub:
          - "${ProjectName}_Incident_Response_StateMachine"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      DefinitionString:
        Fn::Join:
          - ''
          - - "{"
            - '"Comment": " A state machine that submits a Job to AWS Batch and monitors the Job until it completes. ",'
            - '"StartAt": "Report GuardDuty Finding",'
            - '"States": {'
            - '"Report GuardDuty Finding": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - sendGuardDutyFinding
                - Arn
            - "\","
            - '"ResultPath": "$",'
            - '"Next": "Create a Memory Dump of the Instance",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Create a Memory Dump of the Instance": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - captureMemoryDumpForForensic
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Wait for memory dump to complete",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Wait for memory dump to complete": {'
            - '"Type": "Wait",'
            - '"SecondsPath": "$.wait_time",'
            - '"Next": "Check Memory Dump Command State"'
            - "},"
            - '"Check Memory Dump Command State": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - checkCommandState
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Memory Dump Complete?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Memory Dump Complete?": {'
            - '"Type": "Choice",'
            - '"Choices": [{'
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "InProgress",'
            - '"Next": "Wait for memory dump to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Pending",'
            - '"Next": "Wait for memory dump to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Success",'
            - '"Next": "Start Isolating the instance"'
            - "}],"
            - '"Default": "Memory Dump Failed"'
            - "},"
            - '"Memory Dump Failed": {'
            - '"Type": "Fail",'
            - '"Cause": "The memory dump of the affected instance has failed",'
            - '"Error": "Memory Dump command returned Cancelled, Failed or TimeOut"'
            - "},"
            - '"Start Isolating the instance": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - isolateInstance
                - Arn
            - "\","
            - '"Next": "Alert Security Team on Isolation and Incident",'
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Alert Security Team on Isolation and Incident": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - sendIsolationNotification
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Create a Snapshot of the Instance",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Create a Snapshot of the Instance": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - createSnapshotForForensic
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$.snapshotID",'
            - '"Next": "Start Forensic Instance",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Start Forensic Instance": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - createForensicInstance
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Attach Volume For Forensic Analysis",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Attach Volume For Forensic Analysis": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - attachAffectedVolume
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"Next": "SSM Activation Job Complete?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Wait for instance boot up": {'
            - '"Type": "Wait",'
            - '"SecondsPath": "$.wait_time",'
            - '"Next": "IsSSMInstalled"'
            - "},"
            - '"IsSSMInstalled": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - IsSSMInstalled
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"Next": "SSM Activation Job Complete?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - ''
            - '"SSM Activation Job Complete?": {'
            - '"Type": "Choice",'
            - '"Choices": [{'
            - '"Variable": "$.SSM_STATUS",'
            - '"StringEquals": "FAILED",'
            - '"Next": "SSM Activation Job Failed"'
            - "}, {"
            - '"Variable": "$.SSM_STATUS",'
            - '"StringEquals": "SUCCEEDED",'
            - '"Next": "Run Snapshot Forensic Analysis"'
            - "}],"
            - '"Default": "Wait for instance boot up"'
            - "},"
            - '"SSM Activation Job Failed": {'
            - '"Type": "Fail",'
            - '"Cause": "AWS SSM Activation Job Failed",'
            - '"Error": "Describe Job returned FAILED"'
            - "},"
            - '"Run Snapshot Forensic Analysis": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - runSnapshotForensicAnalysis
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Wait for Snapshot Forensic to complete",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Wait for Snapshot Forensic to complete": {'
            - '"Type": "Wait",'
            - '"SecondsPath": "$.wait_time",'
            - '"Next": "Check Snapshot Forensic Analysis State"'
            - "},"
            - '"Check Snapshot Forensic Analysis State": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - checkCommandState
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Snapshot Forensic Analysis Completed?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Snapshot Forensic Analysis Completed?": {'
            - '"Type": "Choice",'
            - '"Choices": [{'
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "InProgress",'
            - '"Next": "Wait for Snapshot Forensic to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Pending",'
            - '"Next": "Wait for Snapshot Forensic to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Success",'
            - '"Next": "Run Memory Forensic Analysis"'
            - "}],"
            - '"Default": "Snapshot Forensic Analysis Failed"'
            - "},"
            - '"Snapshot Forensic Analysis Failed": {'
            - '"Type": "Fail",'
            - '"Cause": "The forensic analysis of the snapshot has failed",'
            - '"Error": "The snapshot forensics commands returned Cancelled, Failed or TimeOut"'
            - "},"
            - '"Run Memory Forensic Analysis": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - runMemoryForensicAnalysis
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Wait for Memory Forensic to complete",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Wait for Memory Forensic to complete": {'
            - '"Type": "Wait",'
            - '"SecondsPath": "$.wait_time",'
            - '"Next": "Check Memory Forensic Analysis State"'
            - "},"
            - '"Check Memory Forensic Analysis State": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - checkCommandState
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Memory Forensic Analysis Completed?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Memory Forensic Analysis Completed?": {'
            - '"Type": "Choice",'
            - '"Choices": [{'
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "InProgress",'
            - '"Next": "Wait for Memory Forensic to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Pending",'
            - '"Next": "Wait for Memory Forensic to complete"'
            - "}, {"
            - '"Variable": "$.COMMAND_STATUS",'
            - '"StringEquals": "Success",'
            - '"Next": "Send Forensic Complete Notification"'
            - "}],"
            - '"Default": "Memory Forensic Analysis Failed"'
            - "},"
            - '"Memory Forensic Analysis Failed": {'
            - '"Type": "Fail",'
            - '"Cause": "The forensic analysis of the Memory has failed",'
            - '"Error": "The memory forensics commands returned Cancelled, Failed or TimeOut"'
            - "},"
            - '"Send Forensic Complete Notification": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - sendForensicNotification
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Check Isolated Instance State",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Check Isolated Instance State": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - checkIsolatedInstanceState
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Stop Instance Complete?",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Stop Instance Complete?": {'
            - '"Type": "Choice",'
            - '"Choices": [{'
            - '"Variable": "$.INSTANCE_STATUS",'
            - '"StringEquals": "running",'
            - '"Next": "Stop Isolated Instance"'
            - "},{"
            - '"Variable": "$.INSTANCE_STATUS",'
            - '"StringEquals": "stopping",'
            - '"Next": "Wait for Instance Stopped"'
            - "},{"
            - '"Variable": "$.INSTANCE_STATUS",'
            - '"StringEquals": "shutting-down",'
            - '"Next": "Wait for Instance Stopped"'
            - "},{"
            - '"Variable": "$.INSTANCE_STATUS",'
            - '"StringEquals": "stopped",'
            - '"Next": "Send Isolated Instance Stopped Notification"'
            - "},{"
            - '"Variable": "$.INSTANCE_STATUS",'
            - '"StringEquals": "terminated",'
            - '"Next": "Send Isolated Instance Stopped Notification"'
            - "}],"
            - '"Default": "Stop Instance Job Failed"'
            - "},"
            - '"Stop Instance Job Failed": {'
            - '"Type": "Fail",'
            - '"Cause": "Isolated Instance Stop Instance Job Failed",'
            - '"Error": "DescribeJob returned FAILED"'
            - "},"
            - '"Stop Isolated Instance": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - stopIsolatedInstance
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"ResultPath": "$",'
            - '"Next": "Wait for Instance Stopped",'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "},"
            - '"Wait for Instance Stopped": {'
            - '"Type": "Wait",'
            - '"SecondsPath": "$.wait_time",'
            - '"Next": "Check Isolated Instance State"'
            - "},"
            - '"Send Isolated Instance Stopped Notification": {'
            - '"Type": "Task",'
            - '"Resource": "'
            - Fn::GetAtt:
                - sendInstanceStoppedNotification
                - Arn
            - "\","
            - '"InputPath": "$",'
            - '"End": true,'
            - '"Retry": [{'
            - '"ErrorEquals": ["States.ALL"],'
            - '"IntervalSeconds": 1,'
            - '"MaxAttempts": 3,'
            - '"BackoffRate": 2.0'
            - "}]"
            - "}"
            - "}"
            - "}"
      RoleArn:
        Fn::GetAtt:
          - IncidenResponseLambdaExecutionRole
          - Arn
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_Quarantine_VPC"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"

  ############################
  # Lambda Functions
  ############################
  parseEventAndStartForensic:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-0-parseEventAndStartForensic"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function parse SNS message and invoke Step functions
      Handler: parseEventAndStartForensic.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref IncidentResponseStepFunction
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-0-parseEventAndStartForensic"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  sendGuardDutyFinding:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-1-sendGuardDutyFinding"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to report the GuardDuty Finding
      Handler: sendGuardDutyFinding.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          HookUrl: 
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackWebHook"
          SlackChannel:
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackChannelName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-1-sendGuardDutyFinding"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  captureMemoryDumpForForensic:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-2-captureMemoryDumpForForensic"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Install LiME and capture a memory dump of the instance and store it localy
      Handler: captureMemoryDumpForForensic.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          OUTPUT_S3_BUCKETNAME: !Ref OutputS3BucketName
          OUTPUT_S3_BUCKETREGION: !Ref OutputS3BucketRegion
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-2-captureMemoryDumpForForensic"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  checkCommandState:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-3-checkCommandState"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Check that the memory dump is completed before proceed with the forensic steps
      Handler: checkCommandState.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-3-checkCommandState"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  isolateInstance:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-4-isolateInstance"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to isolate Ec2 instance
      Handler: isolateInstance.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          ISOLATED_SECUTRITYGROUP: !Ref IsolatedInstanceSecurityGroup
          TAG_PROJECT:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-4-isolateInstance"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  sendIsolationNotification:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-5-sendIsolationNotification"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Send notification for instance Isolation and Snapshot creation
      Handler: sendIsolationNotification.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          HookUrl: 
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackWebHook"
          SlackChannel:
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackChannelName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-5-sendIsolationNotification"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  createSnapshotForForensic:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-6-createSnapshotForForensic"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to isolate Ec2 instance
      Handler: createSnapshotForForensic.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          ISOLATED_SECUTRITYGROUP: !Ref IsolatedInstanceSecurityGroup
          TAG_OWNER:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
          TAG_PROJECT:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-6-createSnapshotForForensic"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  createForensicInstance:
    Type: AWS::Lambda::Function
    DependsOn: ForensicInstanceSecurityGroup
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-7-createForensicInstance"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Send notification for instance Isolation and Snapshot
        creation
      Handler: createForensicInstance.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          FORENSIC_SECUTRITYGROUP: !Ref ForensicInstanceSecurityGroup
          AMI_ID:
            Fn::ImportValue:
                !Sub "${NginxWebAppStackName}-EC2AMIID"
          INSTANCE_TYPE:
            Fn::ImportValue:
                !Sub "${NginxWebAppStackName}-NginxInstanceType"
          INSTANCE_PROFILE_ARN: !GetAtt ForensicInstanceProfile.Arn
          SUBNET_ID:
            Fn::ImportValue:
                !Sub "${QuarantineVpcStackName}-QuarantinePrivateSubnet"
          EC2_KEYPAIR:
            Fn::ImportValue:
                !Sub "${NginxWebAppStackName}-Ec2KeyPairName"
          TAG_OWNER:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
          TAG_PROJECT:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-7-createForensicInstance"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  attachAffectedVolume:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-8-attachAffectedVolume"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Create and attach volume created from Snapshot
      Handler: attachAffectedVolume.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          ISOLATED_SECUTRITYGROUP: !Ref ForensicInstanceSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-8-attachAffectedVolume"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  IsSSMInstalled:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-9-isSSMInstalled"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Check SSM is installed or not
      Handler: isSSMInstalled.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          ISOLATED_SECUTRITYGROUP: !Ref IsolatedInstanceSecurityGroup
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-9-isSSMInstalled"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  runSnapshotForensicAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-10-runSnapshotForensicAnalysis"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Run Forensic Analysis
      Handler: runSnapshotForensicAnalysis.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          OUTPUT_S3_BUCKETNAME: !Ref OutputS3BucketName
          OUTPUT_S3_BUCKETREGION: !Ref OutputS3BucketRegion
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-10-runSnapshotForensicAnalysis"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  runMemoryForensicAnalysis:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-11-runMemoryForensicAnalysis"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Run Forensic Analysis
      Handler: runMemoryForensicAnalysis.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          OUTPUT_S3_BUCKETNAME: !Ref OutputS3BucketName
          OUTPUT_S3_BUCKETREGION: !Ref OutputS3BucketRegion
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-11-runMemoryForensicAnalysis"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  sendForensicNotification:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-12-sendForensicNotification"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Send notification after forensic analysis
      Handler: sendForensicNotification.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          HookUrl: 
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackWebHook"
          SlackChannel:
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackChannelName"
          OUTPUT_S3_BUCKETNAME: !Ref OutputS3BucketName
          OUTPUT_S3_BUCKETREGION: !Ref OutputS3BucketRegion
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-12-sendForensicNotification"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  stopIsolatedInstance:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-13-stopIsolatedInstance"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to stop the isolated instance
      Handler: stopIsolatedInstance.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-13-stopIsolatedInstance"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  checkIsolatedInstanceState:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-14-checkIsolatedInstanceState"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to check the status of the isolaed instance to see if it is stopped
      Handler: checkIsolatedInstanceState.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-14-checkIsolatedInstanceState"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  sendInstanceStoppedNotification:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub:
          - "${ProjectName}_sec-ir-15-sendInstanceStoppedNotification"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Function to Send notification after the isolated instance has been stopped
      Handler: sendInstanceStoppedNotification.lambda_handler
      Runtime: python3.6
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - IncidenResponseLambdaExecutionRole
        - Arn
      Code:
        S3Bucket:
          !Ref LambdaS3BucketName
        S3Key:
          !Ref IncidentResponseLambdaS3FileName
      Environment:
        Variables:
          HookUrl: 
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackWebHook"
          SlackChannel:
            Fn::ImportValue:
              !Sub "${NginxWebAppStackName}-SlackChannelName"
      Tags:
        - Key: Name
          Value:
            Fn::Sub:
              - "${ProjectName}_sec-ir-15-sendInstanceStoppedNotification"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
        - Key: Owner
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseOwner"
        - Key: Project
          Value:
            Fn::ImportValue:
              !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"

  ###############################
  # CloudWatch Event
  ###############################
  GuardDutyFindingEventsRule:
    Type: AWS::Events::Rule
    DependsOn:
      - parseEventAndStartForensic
    Properties:
      Name: 
        Fn::Sub:
          - "${ProjectName}_GuardDuty_Findings"
          - ProjectName:
              Fn::ImportValue:
                !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
      Description: Rule for GardDuty Findings
      EventPattern: 
        source: 
          - "aws.guardduty"
        detail-type:
          - "GuardDuty Finding"
      State: ENABLED
      Targets: 
        - Arn:
            !GetAtt parseEventAndStartForensic.Arn
          Id: 
            Fn::Sub:
              - "${ProjectName}_parseEventAndStartForensic"
              - ProjectName:
                  Fn::ImportValue:
                    !Sub "${ProductionVpcStackName}-IncidentResponseProjectName"
  AllowEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName:
        !Ref parseEventAndStartForensic
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        !GetAtt GuardDutyFindingEventsRule.Arn


############################################################################################
#
# Outputs
#
############################################################################################
Outputs:
  IncidentResponseForensicStackName:
    Description: The name of this incident response forensic stack
    Value: !Sub ${AWS::StackName}
    Export:
      Name: !Sub "${AWS::StackName}-IncidentResponseForensicStackName"
  LambdaS3BucketName:
    Description: Name of the S3 bucket containing the incident response functions code
    Value: !Ref LambdaS3BucketName
    Export:
      Name: !Sub "${AWS::StackName}-LambdaS3BucketName"
  IncidentResponseLambdaS3FileName:
    Description: Name of the file containing the incident response functions code
    Value: !Ref IncidentResponseLambdaS3FileName
    Export:
      Name: !Sub "${AWS::StackName}-IncidentResponseLambdaS3FileName"
  OutputS3BucketName:
    Description: Bucket name - in the same region than this deployment stack (because of VPC Ednpoints) - where the Incident Response functions will output the result of their investigations
    Value: !Ref OutputS3BucketName
    Export:
      Name: !Sub "${AWS::StackName}-OutputS3BucketName"
  OutputS3BucketRegion:
    Description: Region of the S3 bucket used to output the results of the forensic analysis
    Value: !Ref OutputS3BucketRegion
    Export:
      Name: !Sub "${AWS::StackName}-OutputS3BucketRegion"


############################################################################################
#
# Metadata
#
############################################################################################
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    ParameterGroups:
    - Label:
        default: Production and Quarantine Vpc Stacks
      Parameters:
        - ProductionVpcStackName
        - QuarantineVpcStackName
        - NginxWebAppStackName
    - Label:
        default: Lambda Code
      Parameters:
        - LambdaS3BucketName
        - IncidentResponseLambdaS3FileName
        - OutputS3BucketName
        - OutputS3BucketRegion



